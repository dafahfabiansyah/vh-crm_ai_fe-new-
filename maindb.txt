-- Migration 001: Create users table
-- File: 001_create_users_table.sql
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    business_name VARCHAR(255),
    phone_number VARCHAR(20),
    type VARCHAR(50) NOT NULL CHECK (type IN ('Owner', 'Agent')),
    status BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Migration 002: Create tenant table
-- File: 002_create_tenant_table.sql
CREATE TABLE IF NOT EXISTS tenant (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    id_user UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    database_name VARCHAR(255) NOT NULL,
    status BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Migration 003: Create agent_mapping table
-- File: 003_create_agent_mapping_table.sql
CREATE TABLE IF NOT EXISTS agent_mapping (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    id_user UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    id_tenant UUID NOT NULL REFERENCES tenant(id) ON DELETE CASCADE,
    role VARCHAR(50) NOT NULL CHECK (role IN ('Admin', 'Manager', 'Agent')),
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- Migration 005: Create features table
-- File: 005_create_features_table.sql
CREATE TABLE IF NOT EXISTS features (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Migration 006: Create subscription_plans table
-- File: 006_create_subscription_plans_table.sql
CREATE TABLE IF NOT EXISTS subscription_plans (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    base_price DECIMAL(10,2) NOT NULL,
    is_active BOOLEAN DEFAULT true,
    is_popular BOOLEAN DEFAULT false,
    sort_order INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Migration 007: Create subscription_plan_features table
-- File: 007_create_subscription_plan_features_table.sql
CREATE TABLE IF NOT EXISTS subscription_plan_features (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    id_subscription UUID NOT NULL REFERENCES subscription_plans(id) ON DELETE CASCADE,
    id_feature UUID NOT NULL REFERENCES features(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(id_subscription, id_feature)
);
CREATE TABLE IF NOT EXISTS platform_inbox (
    id VARCHAR(255) PRIMARY KEY,
    id_tenant UUID NOT NULL REFERENCES tenant(id) ON DELETE CASCADE,
    platform_name VARCHAR(255) NOT NULL,
    source_type VARCHAR(255) NOT NULL,
    id_pipeline UUID,
    platform_identifier VARCHAR(255) NOT NULL,
    is_connected BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Migration 008: Create tenant_subscription table
-- File: 008_create_tenant_subscription_table.sql
CREATE TABLE IF NOT EXISTS tenant_subscription (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    id_tenant UUID NOT NULL REFERENCES tenant(id) ON DELETE CASCADE,
    id_subscription UUID NOT NULL REFERENCES subscription_plans(id),
    additional_mau INTEGER DEFAULT 0,
    additional_ai_response INTEGER DEFAULT 0,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status VARCHAR(50) NOT NULL CHECK (status IN ('Active', 'Inactive', 'Cancelled')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Migration 009: Create limits table
-- File: 009_create_limits_table.sql
CREATE TABLE IF NOT EXISTS limits (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    id_subscription UUID NOT NULL REFERENCES subscription_plans(id) ON DELETE CASCADE,
    mau INTEGER,
    human_agent INTEGER,
    ai_response INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Migration 010: Create billing table
-- File: 010_create_billing_table.sql
CREATE TABLE IF NOT EXISTS billing (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    id_subscription UUID NOT NULL REFERENCES subscription_plans(id) ON DELETE CASCADE,
    billing_period INTEGER NOT NULL,
    discount_percentage DECIMAL(5,2) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Migration 011: Create transactions table
-- File: 011_create_transactions_table.sql
CREATE TABLE IF NOT EXISTS transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    id_tenant UUID NOT NULL REFERENCES tenant(id) ON DELETE CASCADE,
    transaction_type VARCHAR(50) CHECK (transaction_type IN ('sub_purchase', 'sub_renewal', 'add_mau', 'add_ai_res')),
    id_subscription UUID REFERENCES subscription_plans(id),
    quantity INTEGER,
    unit_price DECIMAL(10,2),
    total_amount DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(100),
    payment_gateway VARCHAR(100),
    prisma_invoice_id VARCHAR(255),
    prisma_payment_id VARCHAR(255),
    prisma_external_id VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Migration 012: Create usage_tracking table
-- File: 012_create_usage_tracking_table.sql
CREATE TABLE IF NOT EXISTS usage_tracking (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    id_tenant UUID NOT NULL REFERENCES tenant(id) ON DELETE CASCADE,
    usage_month DATE NOT NULL,
    current_mau INTEGER DEFAULT 0,
    current_ai_response INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(id_tenant, usage_month)
);

-- Migration 013: Create indexes
-- File: 013_create_indexes.sql
-- Users table indexes
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_type ON users(type);
CREATE INDEX idx_users_status ON users(status);

CREATE INDEX idx_platform_inbox_tenant ON platform_inbox(id_tenant);

-- Tenant table indexes
CREATE INDEX idx_tenant_user ON tenant(id_user);
CREATE INDEX idx_tenant_status ON tenant(status);

-- Agent mapping indexes
CREATE INDEX idx_agent_mapping_user ON agent_mapping(id_user);
CREATE INDEX idx_agent_mapping_tenant ON agent_mapping(id_tenant);
CREATE INDEX idx_agent_mapping_role ON agent_mapping(role);



-- Subscription plans indexes
CREATE INDEX idx_subscription_plans_active ON subscription_plans(is_active);
CREATE INDEX idx_subscription_plans_popular ON subscription_plans(is_popular);

-- Tenant subscription indexes
CREATE INDEX idx_tenant_subscription_tenant ON tenant_subscription(id_tenant);
CREATE INDEX idx_tenant_subscription_plan ON tenant_subscription(id_subscription);
CREATE INDEX idx_tenant_subscription_status ON tenant_subscription(status);
CREATE INDEX idx_tenant_subscription_dates ON tenant_subscription(start_date, end_date);

-- Transactions indexes
CREATE INDEX idx_transactions_tenant ON transactions(id_tenant);
CREATE INDEX idx_transactions_type ON transactions(transaction_type);
CREATE INDEX idx_transactions_subscription ON transactions(id_subscription);
CREATE INDEX idx_transactions_created ON transactions(created_at);

-- Usage tracking indexes
CREATE INDEX idx_usage_tracking_tenant ON usage_tracking(id_tenant);
CREATE INDEX idx_usage_tracking_month ON usage_tracking(usage_month);

    -- Migration 015: Create sa_users table (Super Admin Users)
-- File: 015_create_sa_users_table.sql
CREATE TABLE IF NOT EXISTS sa_users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    role_id UUID NOT NULL,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT true,
    last_login_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Migration 016: Create sa_roles table (Super Admin Roles)
-- File: 016_create_sa_roles_table.sql
CREATE TABLE IF NOT EXISTS sa_roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Migration 017: Create sa_permissions table (Super Admin Permissions)
-- File: 017_create_sa_permissions_table.sql
CREATE TABLE IF NOT EXISTS sa_permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    category VARCHAR(100),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Migration 018: Create sa_role_permissions table (Super Admin Role-Permission Junction)
-- File: 018_create_sa_role_permissions_table.sql
CREATE TABLE IF NOT EXISTS sa_role_permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    permission_id UUID NOT NULL REFERENCES sa_permissions(id) ON DELETE CASCADE,
    role_id UUID NOT NULL REFERENCES sa_roles(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(permission_id, role_id)
);

-- Add foreign key constraint for sa_users.role_id
ALTER TABLE sa_users ADD CONSTRAINT fk_sa_users_role_id FOREIGN KEY (role_id) REFERENCES sa_roles(id);

-- SA tables indexes
CREATE INDEX idx_sa_users_role ON sa_users(role_id);
CREATE INDEX idx_sa_users_email ON sa_users(email);
CREATE INDEX idx_sa_users_active ON sa_users(is_active);
CREATE INDEX idx_sa_roles_active ON sa_roles(is_active);
CREATE INDEX idx_sa_permissions_active ON sa_permissions(is_active);
CREATE INDEX idx_sa_permissions_category ON sa_permissions(category);
CREATE INDEX idx_sa_role_permissions_role ON sa_role_permissions(role_id);
CREATE INDEX idx_sa_role_permissions_permission ON sa_role_permissions(permission_id);



-- Migration 014: Create triggers for updated_at
-- File: 014_create_triggers.sql
-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for all tables with updated_at
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tenant BEFORE UPDATE ON tenant FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tenant_updated_at BEFORE UPDATE ON tenant FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_agent_mapping_updated_at BEFORE UPDATE ON agent_mapping FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_platform_inbox_updated_at BEFORE UPDATE ON platform_inbox FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_features_updated_at BEFORE UPDATE ON features FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_subscription_plans_updated_at BEFORE UPDATE ON subscription_plans FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_subscription_plan_features_updated_at BEFORE UPDATE ON subscription_plan_features FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tenant_subscription_updated_at BEFORE UPDATE ON tenant_subscription FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_limits_updated_at BEFORE UPDATE ON limits FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_billing_updated_at BEFORE UPDATE ON billing FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_transactions_updated_at BEFORE UPDATE ON transactions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_usage_tracking_updated_at BEFORE UPDATE ON usage_tracking FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_sa_users_updated_at BEFORE UPDATE ON sa_users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_sa_roles_updated_at BEFORE UPDATE ON sa_roles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_sa_permissions_updated_at BEFORE UPDATE ON sa_permissions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Migration 019: Create vouchers table
-- File: 019_create_vouchers_table.sql
CREATE TABLE IF NOT EXISTS vouchers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    code VARCHAR(50) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    discount_type VARCHAR(20) NOT NULL CHECK (discount_type IN ('percentage', 'flat_price', 'free_trial')),
    discount_value DECIMAL(10,2), -- For percentage (0-100) or flat price amount
    id_subscription UUID REFERENCES subscription_plans(id) ON DELETE SET NULL, -- For free trial vouchers
    trial_duration_days INTEGER, -- For free trial vouchers
    usage_limit INTEGER, -- Maximum number of times this voucher can be used
    used_count INTEGER DEFAULT 0, -- Current usage count
    is_active BOOLEAN DEFAULT true,
    valid_from TIMESTAMP NOT NULL,
    valid_until TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Constraints to ensure data integrity based on discount type
    CONSTRAINT chk_percentage_discount CHECK (
        (discount_type = 'percentage' AND discount_value >= 0 AND discount_value <= 100) OR
        discount_type != 'percentage'
    ),
    CONSTRAINT chk_flat_price_discount CHECK (
        (discount_type = 'flat_price' AND discount_value > 0) OR
        discount_type != 'flat_price'
    ),
    CONSTRAINT chk_free_trial_requirements CHECK (
        (discount_type = 'free_trial' AND id_subscription IS NOT NULL AND trial_duration_days > 0) OR
        discount_type != 'free_trial'
    ),
    CONSTRAINT chk_usage_limit_positive CHECK (usage_limit IS NULL OR usage_limit > 0),
    CONSTRAINT chk_used_count_non_negative CHECK (used_count >= 0),
    CONSTRAINT chk_valid_date_range CHECK (valid_from < valid_until)
);

-- Create indexes for vouchers table
CREATE INDEX idx_vouchers_code ON vouchers(code);
CREATE INDEX idx_vouchers_type ON vouchers(discount_type);
CREATE INDEX idx_vouchers_active ON vouchers(is_active);
CREATE INDEX idx_vouchers_subscription ON vouchers(id_subscription);
CREATE INDEX idx_vouchers_validity ON vouchers(valid_from, valid_until);
CREATE INDEX idx_vouchers_usage ON vouchers(usage_limit, used_count);

-- Create trigger for vouchers updated_at
CREATE TRIGGER update_vouchers_updated_at BEFORE UPDATE ON vouchers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();